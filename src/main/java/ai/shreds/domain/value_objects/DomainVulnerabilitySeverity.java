package ai.shreds.domain.value_objects;

/**
 * Enumeration of vulnerability severity levels.
 * Defines standard severity levels for security vulnerabilities.
 */
public enum DomainVulnerabilitySeverity {
    CRITICAL("CRITICAL", 5, "Requires immediate attention"),
    HIGH("HIGH", 4, "Should be addressed as soon as possible"),
    MEDIUM("MEDIUM", 3, "Should be addressed in due course"),
    LOW("LOW", 2, "Should be addressed when possible"),
    INFO("INFO", 1, "Informational finding");

    private final String value;
    private final int level;
    private final String description;

    DomainVulnerabilitySeverity(String value, int level, String description) {
        this.value = value;
        this.level = level;
        this.description = description;
    }

    public String getValue() {
        return value;
    }

    public int getLevel() {
        return level;
    }

    public String getDescription() {
        return description;
    }

    /**
     * Checks if this severity level is considered high risk.
     *
     * @return true if severity is HIGH or CRITICAL
     */
    public boolean isHighRisk() {
        return this == CRITICAL || this == HIGH;
    }

    /**
     * Converts a string severity value to enum.
     *
     * @param value The severity value string
     * @return The corresponding severity enum value
     * @throws IllegalArgumentException if value is invalid
     */
    public static DomainVulnerabilitySeverity fromString(String value) {
        if (value == null || value.trim().isEmpty()) {
            throw new IllegalArgumentException("Severity value cannot be null or empty");
        }
        try {
            return valueOf(value.toUpperCase());
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Invalid severity value: " + value);
        }
    }

    /**
     * Compares this severity level with another.
     *
     * @param other The other severity level to compare with
     * @return true if this severity is higher or equal
     */
    public boolean isHigherOrEqualTo(DomainVulnerabilitySeverity other) {
        return this.level >= other.level;
    }
}
